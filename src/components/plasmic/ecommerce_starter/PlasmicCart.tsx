// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m1NBpNyVff55Zfidoo96K
// Component: rgqxCLN4M_xR
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: SDaEQZxE2LvS/component
import CartItem from "../../CartItem"; // plasmic-import: LvhQB8PJLaq9/component
import Button from "../../Button"; // plasmic-import: RwhbLl_Om_ZC/component
import Separator from "../../Separator"; // plasmic-import: YrwEWRRF0zp_/component
import Footer from "../../Footer"; // plasmic-import: tq70WOqYWkeM/component

import { useScreenVariants as useScreenVariantsglcu7Rs72YfE } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: glcu7RS72yfE/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: m1NBpNyVff55Zfidoo96K/projectcss
import sty from "./PlasmicCart.module.css"; // plasmic-import: rgqxCLN4M_xR/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: DmYYd1D1uHJ9/icon
import Secure2Icon from "./icons/PlasmicIcon__Secure2"; // plasmic-import: zI35n43pfqIG/icon
import visa0TncyeRmKkWh from "./images/visa.svg"; // plasmic-import: 0TncyeRMKkWh/picture
import americanExpressJ2SJkVUgw6B from "./images/americanExpress.svg"; // plasmic-import: -J2SJkVUgw6b/picture
import discoverLKUrhaU21Wa from "./images/discover.svg"; // plasmic-import: l-kUrhaU21WA/picture
import mastercardDRql06I3N from "./images/mastercard.svg"; // plasmic-import: dRql0_6i3n-_/picture

export type PlasmicCart__VariantMembers = {
  filled: "filled";
};

export type PlasmicCart__VariantsArgs = {
  filled?: SingleBooleanChoiceArg<"filled">;
};

type VariantPropType = keyof PlasmicCart__VariantsArgs;
export const PlasmicCart__VariantProps = new Array<VariantPropType>("filled");

export type PlasmicCart__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCart__ArgsType;
export const PlasmicCart__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5"
);

export type PlasmicCart__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<typeof NavBar>;
  section?: p.Flex<"section">;
  cartItem?: p.Flex<typeof CartItem>;
  separator?: p.Flex<typeof Separator>;
  svg?: p.Flex<"svg">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCartProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  filled?: SingleBooleanChoiceArg<"filled">;
  className?: string;
}

function PlasmicCart__RenderFunc(props: {
  variants: PlasmicCart__VariantsArgs;
  args: PlasmicCart__ArgsType;
  overrides: PlasmicCart__OverridesType;
  dataFetches?: PlasmicCart__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsglcu7Rs72YfE()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__filled]: hasVariant(variants, "filled", "filled") }
          )}
        >
          <NavBar
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            className={classNames("__wab_instance", sty.navBar, {
              [sty.navBar__filled]: hasVariant(variants, "filled", "filled")
            })}
            filled={
              hasVariant(variants, "filled", "filled")
                ? ("filled" as const)
                : undefined
            }
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8G0I, {
                [sty.freeBox__filled___8G0IPu0Pi]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jpEvh, {
                  [sty.freeBox__filled__jpEvhpu0Pi]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yjc9S,
                    {
                      [sty.text__filled__yjc9SPu0Pi]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "filled", "filled")
                    ? "Your bag (1)"
                    : "Looks like your bag is empty"}
                </div>

                {(hasVariant(variants, "filled", "filled") ? true : false) ? (
                  <CartItem
                    data-plasmic-name={"cartItem"}
                    data-plasmic-override={overrides.cartItem}
                    className={classNames("__wab_instance", sty.cartItem, {
                      [sty.cartItem__filled]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                    title={"Eternity NITRO Men's Running Shoes"}
                  />
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___0SWpi)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Y6Do,
                      {
                        [sty.text__filled___8Y6DoPu0Pi]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      }
                    )}
                  >
                    {
                      "If you have an account, please sign in to see items you previously added."
                    }
                  </div>

                  <Button
                    colors={"black" as const}
                    rounded={"rounded" as const}
                    size={"large" as const}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ygdMm
                        )}
                      >
                        {"Login"}
                      </div>
                    ) : null}
                  </Button>

                  <Button
                    colors={"white" as const}
                    rounded={"rounded" as const}
                  >
                    {"Continue shopping"}
                  </Button>
                </p.Stack>

                {(hasVariant(variants, "filled", "filled") ? false : false) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bbkYt, {
                      [sty.freeBox__filled__bbkYtPu0Pi]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  />
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mnf8S, {
                  [sty.freeBox__filled__mnf8SPu0Pi]: hasVariant(
                    variants,
                    "filled",
                    "filled"
                  )
                })}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7FnuP, {
                    [sty.freeBox__filled___7FnuPpu0Pi]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__owqN,
                      {
                        [sty.text__filled__owqNPu0Pi]: hasVariant(
                          variants,
                          "filled",
                          "filled"
                        )
                      }
                    )}
                  >
                    {"Order Summary"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hjHqj, {
                      [sty.freeBox__filled__hjHqjPu0Pi]: hasVariant(
                        variants,
                        "filled",
                        "filled"
                      )
                    })}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__io6NF)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ivvNr,
                          {
                            [sty.freeBox__filled__ivvNrpu0Pi]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "Subtotal (1)"
                            : "Subtotal (0)",
                          value: args.slot5,
                          className: classNames(sty.slotTargetSlot5, {
                            [sty.slotTargetSlot5__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wXReu,
                          {
                            [sty.freeBox__filled__wXReuPu0Pi]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.children,
                          className: classNames(sty.slotTargetChildren, {
                            [sty.slotTargetChildren__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__jJpAt)}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5PHx,
                            {
                              [sty.text__filled___5PHxPu0Pi]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Shipping (free over $49)"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oc3UI,
                          {
                            [sty.freeBox__filled__oc3UIpu0Pi]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "FREE"
                            : "-",
                          value: args.slot,
                          className: classNames(sty.slotTargetSlot, {
                            [sty.slotTargetSlot__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__qm2R4)}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t9Q1,
                            {
                              [sty.text__filled__t9Q1Pu0Pi]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Tax"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z4NSv,
                          {
                            [sty.freeBox__filled__z4NSvPu0Pi]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: "-",
                          value: args.slot2,
                          className: classNames(sty.slotTargetSlot2, {
                            [sty.slotTargetSlot2__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__h5WKi,
                        {
                          [sty.button__filled__h5WKiPu0Pi]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                      colors={"link" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ja9N
                        )}
                      >
                        {"Have a promo code?"}
                      </div>
                    </Button>

                    <Separator
                      data-plasmic-name={"separator"}
                      data-plasmic-override={overrides.separator}
                      className={classNames("__wab_instance", sty.separator)}
                      dark={"dark" as const}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___253T7,
                        {
                          [sty.freeBox__filled___253T7Pu0Pi]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lVPrx,
                            {
                              [sty.text__filled__lVPrxPu0Pi]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Estimated Total"}
                        </div>
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kgkRo,
                          {
                            [sty.freeBox__filled__kgkRoPu0Pi]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          }
                        )}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                            ? "$88.99"
                            : "$0.00",
                          value: args.slot4,
                          className: classNames(sty.slotTargetSlot4, {
                            [sty.slotTargetSlot4__filled]: hasVariant(
                              variants,
                              "filled",
                              "filled"
                            )
                          })
                        })}
                      </div>
                    </div>

                    {(hasVariant(variants, "filled", "filled") ? true : false)
                      ? p.renderPlasmicSlot({
                          defaultContents: true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__ixAkS
                              )}
                              colors={"blue" as const}
                              rounded={"rounded" as const}
                              size={"large" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__z3DyE
                                )}
                              >
                                {"Checkout"}
                              </div>
                            </Button>
                          ) : null,
                          value: args.slot3
                        })
                      : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__fVlWq,
                        {
                          [sty.freeBox__filled__fVlWqpu0Pi]: hasVariant(
                            variants,
                            "filled",
                            "filled"
                          )
                        }
                      )}
                    >
                      <Secure2Icon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />

                      {(
                        hasVariant(variants, "filled", "filled") ? true : true
                      ) ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__efKkq,
                            {
                              [sty.text__filled__efKkqPu0Pi]: hasVariant(
                                variants,
                                "filled",
                                "filled"
                              )
                            }
                          )}
                        >
                          {"Secure"}
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vnYqm, {
                    [sty.freeBox__filled__vnYqmpu0Pi]: hasVariant(
                      variants,
                      "filled",
                      "filled"
                    )
                  })}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3Dn5K)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    src={{
                      src: visa0TncyeRmKkWh,
                      fullWidth: 210,
                      fullHeight: 150,
                      aspectRatio: 1.4
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__u121T)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    src={{
                      src: americanExpressJ2SJkVUgw6B,
                      fullWidth: 210,
                      fullHeight: 150,
                      aspectRatio: 1.4
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zGvfL)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    src={{
                      src: discoverLKUrhaU21Wa,
                      fullWidth: 210,
                      fullHeight: 150,
                      aspectRatio: 1.4
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__r85DJ)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"48px" as const}
                    src={{
                      src: mastercardDRql06I3N,
                      fullWidth: 213,
                      fullHeight: 150,
                      aspectRatio: 1.416667
                    }}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ll8Fb, {
                [sty.freeBox__filled__ll8FbPu0Pi]: hasVariant(
                  variants,
                  "filled",
                  "filled"
                )
              })}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__o5Awm)}
                displayHeight={"32px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                src={
                  "https://www.patagonia.com/on/demandware.static/-/Library-Sites-PatagoniaShared/default/dw4b201dc8/images/for-the-planet.png" as const
                }
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kwT1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jb1Nx
                  )}
                >
                  {"1% of your purchase will go to a grassroot organization."}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__tNzlD)}
                  colors={"link" as const}
                >
                  {"Learn more"}
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navBar", "section", "cartItem", "separator", "svg", "footer"],
  navBar: ["navBar"],
  section: ["section", "cartItem", "separator", "svg"],
  cartItem: ["cartItem"],
  separator: ["separator"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: typeof NavBar;
  section: "section";
  cartItem: typeof CartItem;
  separator: typeof Separator;
  svg: "svg";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCart__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCart__VariantsArgs;
    args?: PlasmicCart__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCart__Fetches;
  } & Omit<PlasmicCart__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCart__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCart__ArgProps,
      internalVariantPropNames: PlasmicCart__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCart__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCart";
  } else {
    func.displayName = `PlasmicCart.${nodeName}`;
  }
  return func;
}

export const PlasmicCart = Object.assign(
  // Top-level PlasmicCart renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    section: makeNodeComponent("section"),
    cartItem: makeNodeComponent("cartItem"),
    separator: makeNodeComponent("separator"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCart
    internalVariantProps: PlasmicCart__VariantProps,
    internalArgProps: PlasmicCart__ArgProps
  }
);

export default PlasmicCart;
/* prettier-ignore-end */
