// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: m1NBpNyVff55Zfidoo96K
// Component: Jw8LASADv3c6
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: RwhbLl_Om_ZC/component
import Rating from "../../Rating"; // plasmic-import: HrCA_7p3nRe1/component
import Price from "../../Price"; // plasmic-import: OZeHOUXqMPbS/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_ecommerce_starter.module.css"; // plasmic-import: m1NBpNyVff55Zfidoo96K/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: Jw8LASADv3c6/css

import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: DmYYd1D1uHJ9/icon
import shoe14JDryz8O42G9O from "./images/shoe14.png"; // plasmic-import: JDryz8o42g9o/picture

export type PlasmicProductCard__VariantMembers = {
  small: "small";
};

export type PlasmicProductCard__VariantsArgs = {
  small?: SingleBooleanChoiceArg<"small">;
};

type VariantPropType = keyof PlasmicProductCard__VariantsArgs;
export const PlasmicProductCard__VariantProps = new Array<VariantPropType>(
  "small"
);

export type PlasmicProductCard__ArgsType = {
  tags?: React.ReactNode;
  children?: React.ReactNode;
  link?: string | PageHref;
  rating?: React.ReactNode;
  img?: string;
  dollars?: React.ReactNode;
  cents?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProductCard__ArgsType;
export const PlasmicProductCard__ArgProps = new Array<ArgPropType>(
  "tags",
  "children",
  "link",
  "rating",
  "img",
  "dollars",
  "cents"
);

export type PlasmicProductCard__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a">;
  img?: p.Flex<typeof p.PlasmicImg>;
  price?: p.Flex<typeof Price>;
};

export interface DefaultProductCardProps {
  tags?: React.ReactNode;
  children?: React.ReactNode;
  link?: string | PageHref;
  rating?: React.ReactNode;
  img?: string;
  dollars?: React.ReactNode;
  cents?: React.ReactNode;
  small?: SingleBooleanChoiceArg<"small">;
  className?: string;
}

function PlasmicProductCard__RenderFunc(props: {
  variants: PlasmicProductCard__VariantsArgs;
  args: PlasmicProductCard__ArgsType;
  overrides: PlasmicProductCard__OverridesType;
  dataFetches?: PlasmicProductCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root, {
        [sty.root__small]: hasVariant(variants, "small", "small")
      })}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(projectcss.a, sty.link, {
          [sty.link__small]: hasVariant(variants, "small", "small")
        })}
        href={args.link !== undefined ? args.link : ("/item" as const)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"none" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"256px" as const}
          displayWidth={"auto" as const}
          src={
            args.img !== undefined
              ? args.img
              : {
                  src: shoe14JDryz8O42G9O,
                  fullWidth: 840,
                  fullHeight: 840,
                  aspectRatio: undefined
                }
          }
        />

        {(
          hasVariant(variants, "small", "small") && triggers.hover_root
            ? true
            : false
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__qJm3I, {
              [sty.freeBox__small__qJm3IvY5JX]: hasVariant(
                variants,
                "small",
                "small"
              )
            })}
          />
        ) : null}
        {(hasVariant(variants, "small", "small") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__b64Vm, {
              [sty.freeBox__small__b64VmvY5JX]: hasVariant(
                variants,
                "small",
                "small"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__frzF)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Button colors={"lightGray" as const} size={"small" as const}>
                    {"New"}
                  </Button>
                ),

                value: args.tags
              })}

              {p.renderPlasmicSlot({
                defaultContents: (
                  <Rating
                    className={classNames("__wab_instance", sty.rating__kXhyh)}
                  />
                ),

                value: args.rating
              })}
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qrCMx)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2QkWe
                      )}
                    >
                      {"Product name"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__my095
                      )}
                    >
                      {"If you can dream it, you can build it."}
                    </div>
                  </React.Fragment>
                ),
                value: args.children
              })}
            </p.Stack>

            <Price
              data-plasmic-name={"price"}
              data-plasmic-override={overrides.price}
              cents={p.renderPlasmicSlot({
                defaultContents: "99",
                value: args.cents
              })}
              className={classNames("__wab_instance", sty.price)}
              dollars={p.renderPlasmicSlot({
                defaultContents: "88",
                value: args.dollars
              })}
            />
          </p.Stack>
        ) : null}
      </a>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "img", "price"],
  link: ["link", "img", "price"],
  img: ["img"],
  price: ["price"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  img: typeof p.PlasmicImg;
  price: typeof Price;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductCard__VariantsArgs;
    args?: PlasmicProductCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicProductCard__Fetches;
  } & Omit<PlasmicProductCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    price: makeNodeComponent("price"),

    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
